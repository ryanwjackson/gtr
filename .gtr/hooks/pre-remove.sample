#!/bin/bash

# gtr pre-remove hook
# This hook runs BEFORE removing a worktree
#
# Arguments:
#   $1 - worktree name
#   $2 - worktree path
#   $3 - branch name
#   $4 - force flag ("true" or "false")
#   $5 - dry_run flag ("true" or "false")
#
# Exit codes:
#   0 - continue with worktree removal
#   non-zero - abort worktree removal

WORKTREE_NAME="$1"
WORKTREE_PATH="$2"
BRANCH_NAME="$3"
FORCE="$4"
DRY_RUN="$5"

echo "üóëÔ∏è  Pre-remove hook: $WORKTREE_NAME"

if [[ "$DRY_RUN" == "true" ]]; then
    echo "üîç [DRY RUN] Would run pre-remove checks"
    exit 0
fi

# Example: Check for uncommitted changes
# if [[ -d "$WORKTREE_PATH" ]]; then
#     if ! git -C "$WORKTREE_PATH" diff --quiet; then
#         echo "‚ö†Ô∏è  Worktree has uncommitted changes"
#         if [[ "$FORCE" != "true" ]]; then
#             echo "‚ùå Aborting removal (use --force to override)"
#             exit 1
#         fi
#     fi
# fi

# Example: Check for untracked files
# if [[ -d "$WORKTREE_PATH" ]]; then
#     UNTRACKED_FILES=$(git -C "$WORKTREE_PATH" ls-files --others --exclude-standard | wc -l)
#     if [[ "$UNTRACKED_FILES" -gt 0 ]]; then
#         echo "‚ö†Ô∏è  Worktree has $UNTRACKED_FILES untracked files"
#         if [[ "$FORCE" != "true" ]]; then
#             echo "‚ùå Aborting removal (use --force to override)"
#             exit 1
#         fi
#     fi
# fi

# Example: Backup important files
# echo "üíæ Creating backup of important files..."
# BACKUP_DIR="$HOME/.gtr/backups/$WORKTREE_NAME-$(date +%Y%m%d-%H%M%S)"
# mkdir -p "$BACKUP_DIR"
# if [[ -f "$WORKTREE_PATH/.env.local" ]]; then
#     cp "$WORKTREE_PATH/.env.local" "$BACKUP_DIR/" || echo "  ‚ö†Ô∏è  Failed to backup .env.local"
# fi

# Example: Notify external systems before removal
# echo "üì° Notifying development tools..."
# curl -X DELETE "https://your-dev-server.com/worktree/$WORKTREE_NAME" \
#   >/dev/null 2>&1 || echo "  ‚ö†Ô∏è  Failed to notify development server"

echo "‚úÖ Pre-remove checks passed"
exit 0