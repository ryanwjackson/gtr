name: Release Tag Check

on:
  pull_request:
    branches: [ main, master ]
    types: [ opened, synchronize, reopened ]

jobs:
  check-release-tag:
    name: Check for Release Tag
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        # Fetch all history and tags to properly check for release tags
        fetch-depth: 0

    - name: Check for release tag in PR (informational only)
      run: |
        # Get the head commit of the PR
        head_commit=$(git rev-parse HEAD)
        echo "PR head commit: $head_commit"
        
        # Get the base commit (target branch)
        base_commit="${{ github.event.pull_request.base.sha }}"
        echo "PR base commit: $base_commit"
        
        # Check if there's a release tag pointing to the head commit
        head_release_tags=$(git tag -l 'v*.*.*' --points-at "$head_commit" || true)
        
        # If no tag on head, check for tags in the PR's commit range
        if [[ -z "$head_release_tags" ]]; then
          echo "No release tag found on HEAD commit, checking PR commit range..."
          
          # Get all commits in the PR (from base to head)
          pr_commits=$(git rev-list "$base_commit..$head_commit" || true)
          
          if [[ -n "$pr_commits" ]]; then
            echo "Checking for release tags in PR commits:"
            for commit in $pr_commits; do
              commit_tags=$(git tag -l 'v*.*.*' --points-at "$commit" || true)
              if [[ -n "$commit_tags" ]]; then
                echo "✅ Found release tag(s) on commit $commit:"
                echo "$commit_tags"
                head_release_tags="$commit_tags"
                break
              fi
            done
          fi
        fi
        
        if [[ -z "$head_release_tags" ]]; then
          echo "ℹ️  No release tag found in this PR."
          echo ""
          echo "This is informational only. Release tags are not required for development PRs."
          echo "When ready to release, use the bin/release script to create a proper release."
          echo ""
          echo "Available tags on recent commits:"
          git log --oneline --decorate -10 || true
        else
          echo "✅ Found release tag(s) in this PR:"
          echo "$head_release_tags"
          
          # Validate that it's a proper semantic version tag
          for tag in $head_release_tags; do
            if [[ "$tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "✅ Valid semantic version tag: $tag"
            else
              echo "⚠️  Tag $tag does not follow semantic versioning (vMAJOR.MINOR.PATCH)"
            fi
          done
        fi

    - name: Check if this is a release branch
      run: |
        # Get the branch name from the PR
        branch_name="${{ github.head_ref }}"
        echo "PR branch: $branch_name"

        # Check if this looks like a release branch (contains worktree pattern)
        if [[ "$branch_name" == worktrees/* ]]; then
          echo "✅ This appears to be a worktree release branch"
        else
          echo "ℹ️  This does not appear to be a worktree release branch"
          echo "Non-worktree branches may still need release tags for main branch merges"
        fi

    - name: Verify release tag integrity
      run: |
        head_commit=$(git rev-parse HEAD)
        base_commit="${{ github.event.pull_request.base.sha }}"
        
        # Find release tags in the PR (same logic as the main check)
        release_tags=$(git tag -l 'v*.*.*' --points-at "$head_commit" || true)
        
        if [[ -z "$release_tags" ]]; then
          # Check for tags in the PR's commit range
          pr_commits=$(git rev-list "$base_commit..$head_commit" || true)
          if [[ -n "$pr_commits" ]]; then
            for commit in $pr_commits; do
              commit_tags=$(git tag -l 'v*.*.*' --points-at "$commit" || true)
              if [[ -n "$commit_tags" ]]; then
                release_tags="$commit_tags"
                break
              fi
            done
          fi
        fi
        
        if [[ -n "$release_tags" ]]; then
          for tag in $release_tags; do
            # Check if tag exists on remote
            if git ls-remote --tags origin | grep -q "refs/tags/$tag"; then
              echo "✅ Tag $tag exists on remote"
            else
              echo "⚠️  Tag $tag exists locally but not on remote - this may cause issues"
            fi
            
            # Check if it's an annotated tag (preferred for releases)
            if git cat-file -t "$tag" | grep -q "tag"; then
              echo "✅ Tag $tag is an annotated tag (preferred for releases)"
            else
              echo "ℹ️  Tag $tag is a lightweight tag (annotated tags are preferred for releases)"
            fi
          done
        else
          echo "ℹ️  No release tags found to verify"
        fi